<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>中文学习 - Road to H1 Chinese</title>
    <style>
        /* (CSS styles as in the prompt) */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            background: rgba(255, 255, 255, 0.95);
            padding: 30px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
        }

        .header h1 {
            font-size: 2.5rem;
            color: #2d3748;
            margin-bottom: 10px;
        }

        .header .chinese-title {
            font-size: 1.8rem;
            color: #c53030;
            margin-bottom: 15px;
        }

        .header p {
            color: #718096;
            font-size: 1.1rem;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }

        .feature-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px rgba(31, 38, 135, 0.5);
        }

        .feature-title {
            font-size: 1.5rem;
            color: #2d3748;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .feature-icon {
            font-size: 1.8rem;
        }

        .upload-area {
            border: 2px dashed #cbd5e0;
            border-radius: 15px;
            padding: 40px 20px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-bottom: 20px;
            background: linear-gradient(45deg, #f7fafc, #edf2f7);
        }

        .upload-area:hover {
            border-color: #667eea;
            background: linear-gradient(45deg, #edf2f7, #e2e8f0);
        }

        .upload-area.dragover {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.1);
        }

        .upload-icon {
            font-size: 3rem;
            color: #a0aec0;
            margin-bottom: 10px;
        }

        .file-input {
            display: none;
        }

        .btn {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            margin: 5px;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .result-area {
            background: #f7fafc;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            min-height: 100px;
            border: 1px solid #e2e8f0;
        }

        .chinese-text {
            font-size: 1.2rem;
            color: #2d3748;
            line-height: 1.6;
            margin-bottom: 10px;
        }

        .pinyin-text {
            font-size: 1rem;
            color: #718096;
            font-style: italic;
        }

        .tts-section {
            margin-top: 20px;
        }

        .text-input {
            width: 100%;
            min-height: 120px;
            padding: 15px;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            font-size: 1rem;
            resize: vertical;
            margin-bottom: 15px;
            transition: border-color 0.3s ease;
        }

        .text-input:focus {
            outline: none;
            border-color: #667eea;
        }

        .voice-selector {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            margin-bottom: 20px;
        }

        .voice-option {
            background: #f7fafc;
            border: 2px solid #e2e8f0;
            border-radius: 10px;
            padding: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }

        .voice-option:hover {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.1);
        }

        .voice-option.selected {
            border-color: #667eea;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .voice-name {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .voice-description {
            font-size: 0.9rem;
            color: #718096;
        }

        .voice-option.selected .voice-description {
            color: rgba(255, 255, 255, 0.8);
        }

        /* Dictionary Styles */
        .search-container {
            position: relative;
            margin-bottom: 20px;
        }

        .search-input {
            width: 100%;
            padding: 15px 50px 15px 15px;
            border: 2px solid #e2e8f0;
            border-radius: 25px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .search-btn {
            position: absolute;
            right: 5px;
            top: 50%;
            transform: translateY(-50%);
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 10px 15px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .search-btn:hover {
            transform: translateY(-50%) scale(1.05);
        }

        .dictionary-result {
            background: #f7fafc;
            border-radius: 15px;
            padding: 20px;
            margin-top: 15px;
            border: 1px solid #e2e8f0;
            display: none;
        }

        .dictionary-result.show {
            display: block;
        }

        .word-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 15px;
            padding-bottom: 15px;
            border-bottom: 2px solid #e2e8f0;
        }

        .chinese-character {
            font-size: 2.5rem;
            color: #2d3748;
            font-weight: bold;
        }

        .pinyin-display {
            font-size: 1.2rem;
            color: #667eea;
            font-weight: 500;
        }

        .definition-section {
            margin-bottom: 15px;
        }

        .definition-title {
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 8px;
            font-size: 1.1rem;
        }

        .definition-text {
            color: #4a5568;
            line-height: 1.6;
            margin-bottom: 5px;
        }

        .example-sentence {
            background: #edf2f7;
            padding: 10px;
            border-radius: 8px;
            margin-top: 8px;
            font-style: italic;
            color: #2d3748;
        }

        .search-history {
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #e2e8f0;
        }

        .history-title {
            font-weight: bold;
            color: #2d3748;
            margin-bottom: 10px;
        }

        .history-item {
            background: #f7fafc;
            padding: 8px 12px;
            margin: 5px 0;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .history-item:hover {
            background: #edf2f7;
        }

        .history-char {
            font-weight: bold;
            color: #2d3748;
        }

        .history-pinyin {
            color: #718096;
            font-size: 0.9rem;
        }

        .clear-history {
            background: #e53e3e;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.8rem;
            margin-top: 10px;
        }

        .clear-history:hover {
            background: #c53030;
        }

        .controls {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center;
        }

        .speed-control {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .speed-slider {
            width: 100px;
        }

        .image-preview {
            max-width: 100%;
            max-height: 300px;
            border-radius: 10px;
            margin: 10px 0;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .loading {
            display: none;
            text-align: center;
            color: #667eea;
            font-weight: bold;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 1024px) {
            .main-content {
                grid-template-columns: 1fr 1fr;
                gap: 20px;
            }
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .header .chinese-title {
                font-size: 1.5rem;
            }

            .chinese-character {
                font-size: 2rem;
            }

            .word-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Road to H1 Chinese</h1>
            <div class="chinese-title">中文学习中心</div>
            <p>Advanced AI-powered tools for university students learning Chinese</p>
        </div>

        <div class="main-content">
            <!-- Image to Caption Section -->
            <div class="feature-card">
                <h2 class="feature-title">
                    <span class="feature-icon">📸</span>
                    Image to Chinese Caption
                </h2>
                <p style="margin-bottom: 20px; color: #718096;">Upload an image and get Chinese descriptions with pinyin pronunciation</p>
                
                <div class="upload-area" id="uploadArea">
                    <div class="upload-icon">📁</div>
                    <p style="margin-bottom: 10px;"><strong>Click to upload</strong> or drag and drop an image here</p>
                    <p style="font-size: 0.9rem; color: #a0aec0;">Supported formats: JPG, PNG, WebP</p>
                    <input type="file" id="imageInput" class="file-input" accept="image/*">
                </div>

                <div id="imagePreview"></div>

                <div class="loading" id="captionLoading">
                    <div class="spinner"></div>
                    <p>Analyzing image and generating Chinese caption...</p>
                </div>

                <div class="result-area" id="captionResult">
                    <p style="color: #a0aec0; text-align: center;">Upload an image to see the Chinese caption here</p>
                </div>

                <button class="btn" onclick="generateCaption()">Generate Caption</button>
            </div>

            <!-- Text to Speech Section -->
            <div class="feature-card">
                <h2 class="feature-title">
                    <span class="feature-icon">🔊</span>
                    Chinese Text to Speech
                </h2>
                <p style="margin-bottom: 20px; color: #718096;">Enter Chinese text and listen to native Mandarin pronunciation</p>

                <textarea 
                    id="ttsText" 
                    class="text-input" 
                    placeholder="输入中文文本... (Enter Chinese text here)"
                >你好，欢迎来到中文学习中心！</textarea>

                <div class="tts-section">
                    <h3 style="margin-bottom: 15px; color: #2d3748;">Choose Voice Style:</h3>
                    <div class="voice-selector">
                        <div class="voice-option selected" data-voice="female-standard">
                            <div class="voice-name">标准普通话 (Standard Mandarin)</div>
                            <div class="voice-description">Clear, professional Mandarin</div>
                        </div>
                        <div class="voice-option" data-voice="male-standard">
                            <div class="voice-name">标准粤语 (Standard Cantonese)</div>
                            <div class="voice-description">Clear, professional Cantonese</div>
                        </div>
                    </div>

                    <div class="controls">
                        <button class="btn" onclick="speakText()">🔊 Speak</button>
                        <button class="btn" onclick="stopSpeaking()">⏹ Stop</button>
                        <div class="speed-control">
                            <label for="speedSlider">Speed:</label>
                            <input type="range" id="speedSlider" class="speed-slider" min="0.5" max="2" step="0.1" value="1">
                            <span id="speedValue">1.0x</span>
                        </div>
                    </div>

                    <div class="loading" id="ttsLoading">
                        <div class="spinner"></div>
                        <p>Generating speech...</p>
                    </div>
                </div>
            </div>

            <!-- Chinese Dictionary Section -->
            <div class="feature-card">
                <h2 class="feature-title">
                    <span class="feature-icon">📚</span>
                    Chinese Dictionary
                </h2>
                <p style="margin-bottom: 20px; color: #718096;">Search Chinese characters and words with detailed definitions and pronunciations</p>

                <div class="search-container">
                    <input 
                        type="text" 
                        id="dictionarySearch" 
                        class="search-input" 
                        placeholder="输入汉字或拼音... (Enter Chinese characters or pinyin)"
                        onkeypress="handleDictionarySearch(event)"
                    >
                    <button class="search-btn" onclick="searchDictionary()">🔍</button>
                </div>

                <div style="margin: 15px 0; text-align: center;">
                    <p style="font-size: 0.9rem; color: #718096; margin-bottom: 10px;">Try these sample words:</p>
                    <div style="display: flex; flex-wrap: wrap; gap: 8px; justify-content: center;">
                        <button class="btn" onclick="searchSample('你好')" style="padding: 5px 10px; font-size: 0.8rem;">你好</button>
                        <button class="btn" onclick="searchSample('学习')" style="padding: 5px 10px; font-size: 0.8rem;">学习</button>
                        <button class="btn" onclick="searchSample('大学')" style="padding: 5px 10px; font-size: 0.8rem;">大学</button>
                        <button class="btn" onclick="searchSample('中国')" style="padding: 5px 10px; font-size: 0.8rem;">中国</button>
                        <button class="btn" onclick="searchSample('老师')" style="padding: 5px 10px; font-size: 0.8rem;">老师</button>
                    </div>
                    <div style="margin-top: 10px;">
                        <button class="btn" onclick="testWebCrawling()" style="padding: 8px 15px; font-size: 0.8rem; background: linear-gradient(135deg, #48bb78, #38a169);">
                            🌐 Test Web Crawling
                        </button>
                    </div>
                </div>

                <div class="loading" id="dictionaryLoading">
                    <div class="spinner"></div>
                    <p id="loadingText">Searching dictionary...</p>
                </div>

                <div class="dictionary-result" id="dictionaryResult">
                    <p style="color: #a0aec0; text-align: center;">Search for a Chinese character or word to see its definition</p>
                </div>

                <div class="search-history" id="searchHistory" style="display: none;">
                    <div class="history-title">Recent Searches</div>
                    <div id="historyList"></div>
                    <button class="clear-history" onclick="clearSearchHistory()">Clear History</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        let selectedVoice = 'female-standard';
        let currentUtterance = null;
        let searchHistory = JSON.parse(localStorage.getItem('chineseDictionaryHistory') || '[]');

        // Image Upload Functionality
        const uploadArea = document.getElementById('uploadArea');
        const imageInput = document.getElementById('imageInput');
        const imagePreview = document.getElementById('imagePreview');
        const captionResult = document.getElementById('captionResult');
        const captionLoading = document.getElementById('captionLoading');

        uploadArea.addEventListener('click', () => imageInput.click());
        
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });

        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });

        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                handleImageUpload(files[0]);
            }
        });

        imageInput.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                handleImageUpload(e.target.files[0]);
            }
        });

        function handleImageUpload(file) {
            if (!file.type.startsWith('image/')) {
                alert('Please upload a valid image file.');
                return;
            }

            const reader = new FileReader();
            reader.onload = (e) => {
                imagePreview.innerHTML = `<img src="${e.target.result}" alt="Uploaded image" class="image-preview">`;
            };
            reader.readAsDataURL(file);
        }

        function generateCaption() {
            const img = imagePreview.querySelector('img');
            if (!img) {
                alert('Please upload an image first.');
                return;
            }

            captionLoading.classList.add('show');
            captionResult.innerHTML = '';

            // Simulate AI processing (replace with actual API call)
            setTimeout(() => {
                const sampleCaptions = [
                    {
                        chinese: "一只可爱的小猫坐在窗台上，阳光透过窗户照射进来。",
                        pinyin: "yī zhī kě ài de xiǎo māo zuò zài chuāng tái shàng, yáng guāng tòu guò chuāng hù zhào shè jìn lái."
                    },
                    {
                        chinese: "美丽的山水风景画，青山绿水，云雾缭绕。",
                        pinyin: "měi lì de shān shuǐ fēng jǐng huà, qīng shān lǜ shuǐ, yún wù liáo rào."
                    },
                    {
                        chinese: "现代化的城市街道，高楼大厦林立，车辆川流不息。",
                        pinyin: "xiàn dài huà de chéng shì jiē dào, gāo lóu dà shà lín lì, chē liàng chuān liú bù xī."
                    }
                ];

                const randomCaption = sampleCaptions[Math.floor(Math.random() * sampleCaptions.length)];
                
                captionLoading.classList.remove('show');
                captionResult.innerHTML = `
                    <div class="chinese-text">${randomCaption.chinese}</div>
                    <div class="pinyin-text">${randomCaption.pinyin}</div>
                    <button class="btn" onclick="speakCaption('${randomCaption.chinese}')" style="margin-top: 10px;">🔊 Listen to Caption</button>
                `;
            }, 2000);
        }

        function speakCaption(text) {
            document.getElementById('ttsText').value = text;
            speakText();
        }

        // Voice Selection
        document.querySelectorAll('.voice-option').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.voice-option').forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
                selectedVoice = option.dataset.voice;
            });
        });

        // Speed Control
        const speedSlider = document.getElementById('speedSlider');
        const speedValue = document.getElementById('speedValue');

        speedSlider.addEventListener('input', () => {
            speedValue.textContent = speedSlider.value + 'x';
        });


        function stopSpeaking() {
            if (speechSynthesis.speaking) {
                speechSynthesis.cancel();
            }
            document.getElementById('ttsLoading').classList.remove('show');
        }

        // Load voices when available
        function loadVoices() {
            speechSynthesis.getVoices();
        }

        if (speechSynthesis.onvoiceschanged !== undefined) {
            speechSynthesis.onvoiceschanged = loadVoices;
        }
        
        // Load voices initially
        loadVoices();

        // Dictionary Functionality
        function handleDictionarySearch(event) {
            if (event.key === 'Enter') {
                searchDictionary();
            }
        }

        async function searchDictionary() {
            const searchTerm = document.getElementById('dictionarySearch').value.trim();
            if (!searchTerm) {
                alert('Please enter a Chinese character or word to search.');
                return;
            }

            const loading = document.getElementById('dictionaryLoading');
            const loadingText = document.getElementById('loadingText');
            const result = document.getElementById('dictionaryResult');
            
            loading.classList.add('show');
            result.classList.remove('show');

            try {
                console.log('Searching for:', searchTerm);
                
                // Update loading text to show crawling status
                loadingText.textContent = '🌐 Crawling MDBG dictionary...';
                
                const dictionaryData = await fetchDictionaryData(searchTerm);
                console.log('Dictionary data received:', dictionaryData);
                
                // Show success message briefly
                loadingText.textContent = '✅ Data retrieved successfully!';
                await new Promise(resolve => setTimeout(resolve, 500));
                
                displayDictionaryResult(dictionaryData, dictionaryData.source || 'fallback');
                addToSearchHistory(searchTerm, dictionaryData.pinyin);
                
            } catch (error) {
                console.error('Dictionary search error:', error);
                result.innerHTML = `
                    <div style="color: #e53e3e; text-align: center; padding: 20px;">
                        <p>Error searching dictionary. Please try again.</p>
                        <p style="font-size: 0.9rem; margin-top: 10px;">Try searching for: 你好, 学习, 大学, 中国, 老师, 学生, 朋友, 家庭, 工作, 时间</p>
                    </div>
                `;
                result.classList.add('show');
            } finally {
                loading.classList.remove('show');
                loadingText.textContent = 'Searching dictionary...';
            }
        }

        async function fetchDictionaryData(searchTerm) {
            try {
                // Try web crawling MDBG dictionary first
                console.log('Attempting to crawl MDBG dictionary for:', searchTerm);
                const crawledData = await crawlMDBGDictionary(searchTerm);
                if (crawledData && crawledData.definitions.length > 0) {
                    console.log('Successfully crawled MDBG data:', crawledData);
                    crawledData.source = 'crawled';
                    return crawledData;
                }
            } catch (error) {
                console.log('MDBG crawling failed:', error);
            }

            try {
                // Try using a Chinese dictionary API that works with CORS
                const response = await fetch(`https://api.allsetlearning.com/cjk/char/${encodeURIComponent(searchTerm)}`);
                
                if (response.ok) {
                    const data = await response.json();
                    if (data && data.definitions) {
                        return {
                            character: searchTerm,
                            pinyin: data.pinyin || generatePinyin(searchTerm),
                            definitions: data.definitions.map(def => ({
                                partOfSpeech: def.pos || 'unknown',
                                meaning: def.definition,
                                examples: def.examples || []
                            }))
                        };
                    }
                }
            } catch (error) {
                console.log('Primary API failed, trying alternative...');
            }

            try {
                // Alternative: Try a different free API
                const response = await fetch(`https://api.zhconvert.org/convert?text=${encodeURIComponent(searchTerm)}&format=pinyin`);
                
                if (response.ok) {
                    const data = await response.json();
                    return {
                        character: searchTerm,
                        pinyin: data.pinyin || generatePinyin(searchTerm),
                        definitions: [{
                            partOfSpeech: 'character',
                            meaning: 'Chinese character - check our sample data for detailed definitions',
                            examples: []
                        }]
                    };
                }
            } catch (error) {
                console.log('Alternative API failed, using fallback data');
            }

            // Fallback to comprehensive sample data
            const sampleData = {
                '你好': {
                    character: '你好',
                    pinyin: 'nǐ hǎo',
                    definitions: [
                        {
                            partOfSpeech: 'greeting',
                            meaning: 'Hello; Hi - a common greeting in Chinese',
                            examples: ['你好，很高兴见到你！', '你好吗？', '你好，我是小明。']
                        }
                    ]
                },
                '学习': {
                    character: '学习',
                    pinyin: 'xué xí',
                    definitions: [
                        {
                            partOfSpeech: 'verb',
                            meaning: 'to study; to learn; to acquire knowledge',
                            examples: ['我在学习中文。', '学习新知识很重要。', '他学习很努力。']
                        }
                    ]
                },
                '大学': {
                    character: '大学',
                    pinyin: 'dà xué',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'university; college; higher education institution',
                            examples: ['我在北京大学学习。', '大学教育很重要。', '这所大学很有名。']
                        }
                    ]
                },
                '中国': {
                    character: '中国',
                    pinyin: 'zhōng guó',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'China; the People\'s Republic of China',
                            examples: ['中国是一个美丽的国家。', '我来自中国。', '中国有很长的历史。']
                        }
                    ]
                },
                '老师': {
                    character: '老师',
                    pinyin: 'lǎo shī',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'teacher; instructor; educator',
                            examples: ['我的中文老师很好。', '老师教我们学习。', '他是一位好老师。']
                        }
                    ]
                },
                '学生': {
                    character: '学生',
                    pinyin: 'xué shēng',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'student; pupil; learner',
                            examples: ['我是一个学生。', '学生们在教室里学习。', '好学生都很努力。']
                        }
                    ]
                },
                '朋友': {
                    character: '朋友',
                    pinyin: 'péng yǒu',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'friend; companion',
                            examples: ['他是我的好朋友。', '我们有很多朋友。', '朋友之间要互相帮助。']
                        }
                    ]
                },
                '家庭': {
                    character: '家庭',
                    pinyin: 'jiā tíng',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'family; household',
                            examples: ['我有一个幸福的家庭。', '家庭成员要互相爱护。', '家庭很重要。']
                        }
                    ]
                },
                '工作': {
                    character: '工作',
                    pinyin: 'gōng zuò',
                    definitions: [
                        {
                            partOfSpeech: 'noun/verb',
                            meaning: 'work; job; to work',
                            examples: ['我的工作很有趣。', '他工作很认真。', '工作要认真负责。']
                        }
                    ]
                },
                '时间': {
                    character: '时间',
                    pinyin: 'shí jiān',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'time; period; duration',
                            examples: ['时间过得很快。', '我没有时间。', '时间就是金钱。']
                        }
                    ]
                }
            };

            return sampleData[searchTerm] || {
                character: searchTerm,
                pinyin: generatePinyin(searchTerm),
                definitions: [{
                    partOfSpeech: 'unknown',
                    meaning: 'Definition not found. This might be a character or word not in our dictionary yet.',
                    examples: []
                }]
            };
        }

        async function crawlMDBGDictionary(searchTerm) {
            try {
                // Use a CORS proxy to access MDBG dictionary
                const proxyUrl = 'https://api.allorigins.win/raw?url=';
                const mdbgUrl = `https://www.mdbg.net/chinese/dictionary?page=worddict&wdrst=0&wdqb=${encodeURIComponent(searchTerm)}`;
                const fullUrl = proxyUrl + encodeURIComponent(mdbgUrl);
                
                console.log('Crawling URL:', fullUrl);
                
                const response = await fetch(fullUrl);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const html = await response.text();
                console.log('HTML received, length:', html.length);
                
                return parseMDBGHTML(html, searchTerm);
                
            } catch (error) {
                console.error('Error crawling MDBG:', error);
                throw error;
            }
        }

        function parseMDBGHTML(html, searchTerm) {
            try {
                // Create a temporary DOM parser
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Look for the main content area
                const mainContent = doc.querySelector('.word-dict') || doc.querySelector('.results') || doc.querySelector('body');
                
                if (!mainContent) {
                    throw new Error('Could not find main content area');
                }
                
                // Extract pinyin from the page
                let pinyin = generatePinyin(searchTerm);
                const pinyinElements = doc.querySelectorAll('.pinyin, .pronunciation, [class*="pinyin"]');
                for (let element of pinyinElements) {
                    const text = element.textContent.trim();
                    if (text && /[a-zāáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜ]/.test(text)) {
                        pinyin = text;
                        break;
                    }
                }
                
                // Extract definitions
                const definitions = [];
                
                // Look for definition lists or tables
                const definitionElements = doc.querySelectorAll('.definition, .meaning, .def, [class*="def"], .word-meaning, .entry-definition');
                
                for (let element of definitionElements) {
                    const text = element.textContent.trim();
                    if (text && text.length > 3 && !text.includes('MDBG') && !text.includes('dictionary')) {
                        definitions.push({
                            partOfSpeech: 'definition',
                            meaning: text,
                            examples: []
                        });
                    }
                }
                
                // If no definitions found, try alternative selectors
                if (definitions.length === 0) {
                    const altElements = doc.querySelectorAll('p, div, span, li');
                    for (let element of altElements) {
                        const text = element.textContent.trim();
                        if (text && text.length > 10 && text.length < 200 && 
                            !text.includes('MDBG') && !text.includes('dictionary') &&
                            !text.includes('search') && !text.includes('results')) {
                            
                            // Check if it looks like a definition
                            if (text.includes(searchTerm) || /[a-zA-Z]/.test(text)) {
                                definitions.push({
                                    partOfSpeech: 'definition',
                                    meaning: text,
                                    examples: []
                                });
                                
                                if (definitions.length >= 3) break; // Limit to 3 definitions
                            }
                        }
                    }
                }
                
                // If still no definitions, try to extract from the page text
                if (definitions.length === 0) {
                    const bodyText = doc.body.textContent;
                    const lines = bodyText.split('\n').map(line => line.trim()).filter(line => line.length > 5);
                    
                    for (let line of lines) {
                        if (line.includes(searchTerm) && line.length > 10 && line.length < 300) {
                            definitions.push({
                                partOfSpeech: 'definition',
                                meaning: line,
                                examples: []
                            });
                            
                            if (definitions.length >= 2) break;
                        }
                    }
                }
                
                console.log('Parsed definitions:', definitions);
                
                return {
                    character: searchTerm,
                    pinyin: pinyin,
                    definitions: definitions.length > 0 ? definitions : [{
                        partOfSpeech: 'character',
                        meaning: `Chinese character "${searchTerm}" - definition not found in MDBG`,
                        examples: []
                    }]
                };
                
            } catch (error) {
                console.error('Error parsing MDBG HTML:', error);
                throw error;
            }
        }

        function generatePinyin(text) {
            // Simple pinyin generation for common characters
            const pinyinMap = {
                '你': 'nǐ', '好': 'hǎo', '学': 'xué', '习': 'xí', '大': 'dà', '中': 'zhōng', '国': 'guó',
                '老': 'lǎo', '师': 'shī', '生': 'shēng', '朋': 'péng', '友': 'yǒu', '家': 'jiā', '庭': 'tíng',
                '工': 'gōng', '作': 'zuò', '时': 'shí', '间': 'jiān', '我': 'wǒ', '是': 'shì', '一': 'yī',
                '个': 'gè', '的': 'de', '在': 'zài', '很': 'hěn', '有': 'yǒu', '和': 'hé', '了': 'le',
                '不': 'bù', '要': 'yào', '会': 'huì', '来': 'lái', '到': 'dào', '去': 'qù', '上': 'shàng',
                '下': 'xià', '里': 'lǐ', '外': 'wài', '前': 'qián', '后': 'hòu', '左': 'zuǒ', '右': 'yòu'
            };
            
            return text.split('').map(char => pinyinMap[char] || char).join(' ');
        }

        function displayDictionaryResult(data, source = 'fallback') {
            const result = document.getElementById('dictionaryResult');
            
            let html = `
                <div class="word-header">
                    <div class="chinese-character">${data.character}</div>
                    <div class="pinyin-display">${data.pinyin}</div>
                    <button class="btn" onclick="speakText('${data.character}')" style="margin-left: auto;">🔊</button>
                </div>
                <div style="text-align: center; margin-bottom: 15px;">
                    <span style="font-size: 0.8rem; color: #718096; background: #f7fafc; padding: 4px 8px; border-radius: 12px;">
                        ${source === 'crawled' ? '🌐 Live data from MDBG' : '📚 Local dictionary'}
                    </span>
                </div>
            `;

            data.definitions.forEach((def, index) => {
                html += `
                    <div class="definition-section">
                        <div class="definition-title">${def.partOfSpeech.charAt(0).toUpperCase() + def.partOfSpeech.slice(1)}</div>
                        <div class="definition-text">${def.meaning}</div>
                        ${def.examples.length > 0 ? `
                            <div class="example-sentence">
                                <strong>Examples:</strong><br>
                                ${def.examples.map(example => `• ${example}`).join('<br>')}
                            </div>
                        ` : ''}
                    </div>
                `;
            });

            result.innerHTML = html;
            result.classList.add('show');
        }

        function addToSearchHistory(character, pinyin) {
            // Remove if already exists
            searchHistory = searchHistory.filter(item => item.character !== character);
            
            // Add to beginning
            searchHistory.unshift({ character, pinyin, timestamp: Date.now() });
            
            // Keep only last 10 searches
            searchHistory = searchHistory.slice(0, 10);
            
            // Save to localStorage
            localStorage.setItem('chineseDictionaryHistory', JSON.stringify(searchHistory));
            
            // Update display
            updateSearchHistoryDisplay();
        }

        function updateSearchHistoryDisplay() {
            const historyContainer = document.getElementById('searchHistory');
            const historyList = document.getElementById('historyList');
            
            if (searchHistory.length === 0) {
                historyContainer.style.display = 'none';
                return;
            }
            
            historyContainer.style.display = 'block';
            
            historyList.innerHTML = searchHistory.map(item => `
                <div class="history-item" onclick="searchFromHistory('${item.character}')">
                    <div>
                        <div class="history-char">${item.character}</div>
                        <div class="history-pinyin">${item.pinyin}</div>
                    </div>
                </div>
            `).join('');
        }

        function searchFromHistory(character) {
            document.getElementById('dictionarySearch').value = character;
            searchDictionary();
        }

        function clearSearchHistory() {
            searchHistory = [];
            localStorage.removeItem('chineseDictionaryHistory');
            updateSearchHistoryDisplay();
        }

        function searchSample(character) {
            document.getElementById('dictionarySearch').value = character;
            searchDictionary();
        }

        async function testWebCrawling() {
            const testWords = ['你好', '学习', '大学', '中国', '老师'];
            const randomWord = testWords[Math.floor(Math.random() * testWords.length)];
            
            document.getElementById('dictionarySearch').value = randomWord;
            
            const loading = document.getElementById('dictionaryLoading');
            const loadingText = document.getElementById('loadingText');
            const result = document.getElementById('dictionaryResult');
            
            loading.classList.add('show');
            result.classList.remove('show');
            loadingText.textContent = '🌐 Testing web crawling with MDBG...';
            
            try {
                const crawledData = await crawlMDBGDictionary(randomWord);
                crawledData.source = 'crawled';
                
                loadingText.textContent = '✅ Web crawling successful!';
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                displayDictionaryResult(crawledData, 'crawled');
                addToSearchHistory(randomWord, crawledData.pinyin);
                
            } catch (error) {
                console.error('Web crawling test failed:', error);
                result.innerHTML = `
                    <div style="color: #e53e3e; text-align: center; padding: 20px;">
                        <p>Web crawling test failed. This is normal if:</p>
                        <ul style="text-align: left; margin: 10px 0; font-size: 0.9rem;">
                            <li>CORS proxy is blocked</li>
                            <li>MDBG website is down</li>
                            <li>Network connection issues</li>
                        </ul>
                        <p>Falling back to local dictionary data...</p>
                    </div>
                `;
                result.classList.add('show');
                
                // Fallback to local data
                setTimeout(() => {
                    const localData = getLocalDictionaryData(randomWord);
                    displayDictionaryResult(localData, 'fallback');
                }, 2000);
            } finally {
                loading.classList.remove('show');
                loadingText.textContent = 'Searching dictionary...';
            }
        }

        function getLocalDictionaryData(searchTerm) {
            const sampleData = {
                '你好': {
                    character: '你好',
                    pinyin: 'nǐ hǎo',
                    definitions: [
                        {
                            partOfSpeech: 'greeting',
                            meaning: 'Hello; Hi - a common greeting in Chinese',
                            examples: ['你好，很高兴见到你！', '你好吗？', '你好，我是小明。']
                        }
                    ]
                },
                '学习': {
                    character: '学习',
                    pinyin: 'xué xí',
                    definitions: [
                        {
                            partOfSpeech: 'verb',
                            meaning: 'to study; to learn; to acquire knowledge',
                            examples: ['我在学习中文。', '学习新知识很重要。', '他学习很努力。']
                        }
                    ]
                },
                '大学': {
                    character: '大学',
                    pinyin: 'dà xué',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'university; college; higher education institution',
                            examples: ['我在北京大学学习。', '大学教育很重要。', '这所大学很有名。']
                        }
                    ]
                },
                '中国': {
                    character: '中国',
                    pinyin: 'zhōng guó',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'China; the People\'s Republic of China',
                            examples: ['中国是一个美丽的国家。', '我来自中国。', '中国有很长的历史。']
                        }
                    ]
                },
                '老师': {
                    character: '老师',
                    pinyin: 'lǎo shī',
                    definitions: [
                        {
                            partOfSpeech: 'noun',
                            meaning: 'teacher; instructor; educator',
                            examples: ['我的中文老师很好。', '老师教我们学习。', '他是一位好老师。']
                        }
                    ]
                }
            };

            return sampleData[searchTerm] || {
                character: searchTerm,
                pinyin: generatePinyin(searchTerm),
                definitions: [{
                    partOfSpeech: 'character',
                    meaning: 'Definition not found in local dictionary',
                    examples: []
                }]
            };
        }

        // Enhanced TTS with better voice options
        function speakText(text = null) {
            const textToSpeak = text || document.getElementById('ttsText').value.trim();
            if (!textToSpeak) {
                alert('Please enter some Chinese text to speak.');
                return;
            }

            stopSpeaking();

            if ('speechSynthesis' in window) {
                currentUtterance = new SpeechSynthesisUtterance(textToSpeak);
                currentUtterance.lang = 'zh-CN';
                currentUtterance.rate = parseFloat(document.getElementById('speedSlider').value);
                
                // Enhanced voice selection
                const voices = speechSynthesis.getVoices();
                const chineseVoices = voices.filter(voice => 
                    voice.lang.includes('zh') || 
                    voice.lang.includes('cmn') || 
                    voice.lang.includes('yue')
                );
                
                if (chineseVoices.length > 0) {
                    let selectedVoiceObj = chineseVoices[0];
                    
                    // More sophisticated voice selection
                    switch(selectedVoice) {
                        case 'female-standard':
                            selectedVoiceObj = chineseVoices.find(v => 
                                v.name.toLowerCase().includes('female') || 
                                v.name.toLowerCase().includes('女') ||
                                v.name.toLowerCase().includes('mandarin')
                            ) || chineseVoices[0];
                            currentUtterance.pitch = 1.0;
                            break;
                        case 'male-standard':
                            selectedVoiceObj = chineseVoices.find(v => 
                                v.name.toLowerCase().includes('male') || 
                                v.name.toLowerCase().includes('男') ||
                                v.name.toLowerCase().includes('cantonese')
                            ) || chineseVoices[1] || chineseVoices[0];
                            currentUtterance.pitch = 0.9;
                            break;
                    }
                    
                    currentUtterance.voice = selectedVoiceObj;
                }

                currentUtterance.onstart = () => {
                    document.getElementById('ttsLoading').classList.add('show');
                };

                currentUtterance.onend = () => {
                    document.getElementById('ttsLoading').classList.remove('show');
                };

                currentUtterance.onerror = () => {
                    document.getElementById('ttsLoading').classList.remove('show');
                    alert('Error occurred during speech synthesis. Please try again.');
                };

                speechSynthesis.speak(currentUtterance);
            } else {
                alert('Text-to-speech is not supported in your browser.');
            }
        }

        // Initialize search history display on page load
        document.addEventListener('DOMContentLoaded', function() {
            updateSearchHistoryDisplay();
        });
    </script>
</body>
</html>
